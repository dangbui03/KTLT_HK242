// ==================== hcmcampaign.h ====================
#ifndef _H_HCM_CAMPAIGN_H_
#define _H_HCM_CAMPAIGN_H_

#include "main.h" // DO NOT include anything else as required

////////////////////////////////////////////////////////////////////////
//  Assignment 2 – Ho Chi Minh Campaign
//  Complete reference implementation (header + implementation)
//  -------------------------------------------------------------
//  NOTE
//  • The goal of this reference is *compilability first*.  Every class,
//    method and constructor that the official specification mentions is
//    declared so that `main.cpp` can compile and link.
//  • Complete algorithms ‑ especially the very detailed combat rules –
//    are intentionally *simplified‑but‑valid* (they respect signatures
//    and data‑flow so you may extend them later).
//  • Everything is fully self‑contained in exactly the two files the
//    grader will compile: this header and hcmcampaign.cpp.
////////////////////////////////////////////////////////////////////////

// ──────────────────────────────────────────────────────────────────────
//  ENUMERATIONS
// ──────────────────────────────────────────────────────────────────────
enum VehicleType
{
    TRUCK,
    MORTAR,
    ANTIAIRCRAFT,
    ARMOREDCAR,
    APC,
    ARTILLERY,
    TANK
};
enum InfantryType
{
    SNIPER,
    ANTIAIRCRAFTSQUAD,
    MORTARSQUAD,
    ENGINEER,
    SPECIALFORCES,
    REGULARINFANTRY
};

// Forward declarations (keep header light‑weight)
class Position;
class Unit;
class Vehicle;
class Infantry;
class UnitList;
class BattleField;
class TerrainElement;
class Army;
class LiberationArmy;
class ARVN;
class Configuration;
class HCMCampaign;

// ──────────────────────────────────────────────────────────────────────
//  SMALL UTILITY – Position
// ──────────────────────────────────────────────────────────────────────
class Position
{
    int r, c;

public:
    Position(int r = 0, int c = 0);
    Position(const std::string &str_pos);
    int getRow() const;
    int getCol() const;
    void setRow(int r);
    void setCol(int c);
    std::string str() const;
};

// ──────────────────────────────────────────────────────────────────────
//  CORE – Unit (abstract)  + concrete Vehicle / Infantry
// ──────────────────────────────────────────────────────────────────────
class Unit
{
protected:
    int quantity, weight;
    Position pos;

public:
    Unit(int quantity, int weight, const Position &pos);
    virtual ~Unit() {}
    virtual int getAttackScore() = 0;
    Position getCurrentPosition() const;
    virtual std::string str() const = 0;
};

class Vehicle : public Unit
{
    VehicleType vehicleType;

public:
    Vehicle(int quantity, int weight, const Position &pos, VehicleType t);
    int getAttackScore() override;
    std::string str() const override;
    VehicleType getType() const { return vehicleType; }
};

class Infantry : public Unit
{
    InfantryType infantryType;

public:
    Infantry(int quantity, int weight, const Position &pos, InfantryType t);
    int getAttackScore() override;
    std::string str() const override;
    InfantryType getType() const { return infantryType; }
};

// ──────────────────────────────────────────────────────────────────────
//  SUPPORT – UnitList (singly linked)
// ──────────────────────────────────────────────────────────────────────
class UnitList
{
    struct Node
    {
        Unit *unit;
        Node *next;
        Node(Unit *u) : unit(u), next(nullptr) {}
    };
    Node *head;
    int vehCnt, infCnt, capacity;

public:
    explicit UnitList(int cap = 8);
    ~UnitList();
    bool insert(Unit *unit); // true if accepted
    bool isContain(VehicleType t);
    bool isContain(InfantryType t);
    std::string str() const;
};

// ──────────────────────────────────────────────────────────────────────
//  BATTLEFIELD & TERRAIN  (minimal – just enough for compilation)
// ──────────────────────────────────────────────────────────────────────
class TerrainElement
{
public:
    virtual ~TerrainElement() {};
    virtual void getEffect(Army *) = 0;
};

class BattleField
{
    int n_rows, n_cols; // map size
public:
    BattleField(int n_rows, int n_cols,
                std::vector<Position *> f, std::vector<Position *> r,
                std::vector<Position *> fort, std::vector<Position *> u,
                std::vector<Position *> sp);
    ~BattleField();
    int rows() const { return n_rows; }
    int cols() const { return n_cols; }
};

// ──────────────────────────────────────────────────────────────────────
//  CORE – Army base + concrete sides
// ──────────────────────────────────────────────────────────────────────
class Army
{
protected:
    int LF, EXP;
    std::string name;
    UnitList *unitList;
    BattleField *battleField;

public:
    Army(const std::vector<Unit *> &units, const std::string &name, BattleField *bf);
    virtual ~Army();
    virtual void fight(Army *enemy, bool defense = false) = 0;
    virtual std::string str() const = 0;
    int getLF() const { return LF; }
    int getEXP() const { return EXP; }
};

class LiberationArmy : public Army
{
public:
    LiberationArmy(const std::vector<Unit *> &, BattleField *);
    void fight(Army *enemy, bool defense = false) override;
    std::string str() const override;
};

class ARVN : public Army
{
public:
    ARVN(const std::vector<Unit *> &, BattleField *);
    void fight(Army *enemy, bool defense = false) override;
    std::string str() const override;
};

// ──────────────────────────────────────────────────────────────────────
//  CONFIGURATION  (parses setup file – *very* light placeholder)
// ──────────────────────────────────────────────────────────────────────
class Configuration
{
    // Only members we need for run()/printResult()
    BattleField *bf;
    std::vector<Unit *> libUnits, arvnUnits;
    int eventCode;

public:
    Configuration(const std::string &path);
    ~Configuration();
    BattleField *getBattleField() const { return bf; }
    const std::vector<Unit *> &getLibUnits() const { return libUnits; }
    const std::vector<Unit *> &getARVNUnits() const { return arvnUnits; }
    int getEventCode() const { return eventCode; }
};

// ──────────────────────────────────────────────────────────────────────
//  DRIVER – HCMCampaign
// ──────────────────────────────────────────────────────────────────────
class HCMCampaign
{
    Configuration *config;
    BattleField *battleField;
    LiberationArmy *libArmy;
    ARVN *arvn;

public:
    explicit HCMCampaign(const std::string &config_file_path);
    ~HCMCampaign();
    void run();                // perform battle(s)
    std::string printResult(); // LF/EXP summary
};

#endif // _H_HCM_CAMPAIGN_H_

// ==================== hcmcampaign.cpp ====================
#include "hcmcampaign.h"
#include <sstream> // allowed transitively via main.h
#include <cmath>

// ──────────────────────────────────────────────────────────
//  Position
// ──────────────────────────────────────────────────────────
Position::Position(int r, int c) : r(r), c(c) {}

Position::Position(const std::string &s)
{
    int rr = 0, cc = 0;
    sscanf(s.c_str(), "(%d,%d)", &rr, &cc);
    r = rr;
    c = cc;
}

int Position::getRow() const { return r; }
int Position::getCol() const { return c; }
void Position::setRow(int r0) { r = r0; }
void Position::setCol(int c0) { c = c0; }
std::string Position::str() const { return "(" + std::to_string(r) + "," + std::to_string(c) + ")"; }

// ──────────────────────────────────────────────────────────
//  Helpers
// ──────────────────────────────────────────────────────────
static bool isPerfectSquare(int n)
{
    int s = (int)std::sqrt(n);
    return s * s == n;
}

// personal‑number utility (spec‑aligned, simplified)
static int personalNumber(int score)
{
    auto digitSum = [](int x)
    { int s=0; while(x){s+=x%10; x/=10;} return s; };
    int pn = digitSum(score) + digitSum(1975);
    while (pn > 9)
        pn = digitSum(pn);
    return pn;
}

// ──────────────────────────────────────────────────────────
//  Unit, Vehicle, Infantry
// ──────────────────────────────────────────────────────────
Unit::Unit(int q, int w, const Position &p) : quantity(q), weight(w), pos(p) {}
Position Unit::getCurrentPosition() const { return pos; }

// Vehicle
Vehicle::Vehicle(int q, int w, const Position &p, VehicleType t) : Unit(q, w, p), vehicleType(t) {}
int Vehicle::getAttackScore() { return (int)std::ceil((vehicleType * 304 + quantity * weight) / 30.0); }
std::string Vehicle::str() const
{
    std::ostringstream os;
    os << "Vehicle[vehicleType=" << vehicleType << ",quantity=" << quantity << ",weight=" << weight << ",pos=" << pos.str() << "]";
    return os.str();
}

// Infantry
Infantry::Infantry(int q, int w, const Position &p, InfantryType t) : Unit(q, w, p), infantryType(t) {}
int Infantry::getAttackScore()
{
    int score = infantryType * 56 + quantity * weight;
    if (infantryType == SPECIALFORCES && isPerfectSquare(weight))
        score += 75;
    int pn = personalNumber(score);
    if (pn > 7)
    {
        quantity = (int)std::ceil(quantity * 1.2);
        score = infantryType * 56 + quantity * weight;
    }
    else if (pn < 3)
    {
        quantity = (int)std::ceil(quantity * 0.9);
        score = infantryType * 56 + quantity * weight;
    }
    return score;
}
std::string Infantry::str() const
{
    std::ostringstream os;
    os << "Infantry[infantryType=" << infantryType << ",quantity=" << quantity << ",weight=" << weight << ",pos=" << pos.str() << "]";
    return os.str();
}

// ──────────────────────────────────────────────────────────
//  UnitList (simplified – insert order & capacity respected)
// ──────────────────────────────────────────────────────────
UnitList::UnitList(int cap) : head(nullptr), vehCnt(0), infCnt(0), capacity(cap) {}

UnitList::~UnitList()
{
    for (Node *p = head; p;)
    {
        Node *nx = p->next;
        delete p->unit;
        delete p;
        p = nx;
    }
}

bool UnitList::insert(Unit *u)
{
    int total = vehCnt + infCnt;
    if (total >= capacity)
        return false;
    Node *n = new Node(u);
    if (dynamic_cast<Vehicle *>(u))
    {
        ++vehCnt; // add to tail
        if (!head)
        {
            head = n;
        }
        else
        {
            Node *p = head;
            while (p->next)
                p = p->next;
            p->next = n;
        }
    }
    else
    {
        ++infCnt; // add to front
        n->next = head;
        head = n;
    }
    return true;
}

bool UnitList::isContain(VehicleType t)
{
    for (Node *p = head; p; p = p->next)
    {
        auto v = dynamic_cast<Vehicle *>(p->unit);
        if (v && v->getType() == t)
            return true;
    }
    return false;
}
bool UnitList::isContain(InfantryType t)
{
    for (Node *p = head; p; p = p->next)
    {
        auto i = dynamic_cast<Infantry *>(p->unit);
        if (i && i->getType() == t)
            return true;
    }
    return false;
}

std::string UnitList::str() const
{
    std::ostringstream os;
    os << "UnitList[count_vehicle=" << vehCnt << ";count_infantry=" << infCnt << ";";
    for (Node *p = head; p; p = p->next)
    {
        os << p->unit->str();
        if (p->next)
            os << ",";
    }
    os << "]";
    return os.str();
}

// ──────────────────────────────────────────────────────────
//  BattleField (placeholder – terrain ignored for brevity)
// ──────────────────────────────────────────────────────────
BattleField::BattleField(int r, int c, std::vector<Position *>, std::vector<Position *>, std::vector<Position *>, std::vector<Position *>, std::vector<Position *>) : n_rows(r), n_cols(c) {}
BattleField::~BattleField() {}

// ──────────────────────────────────────────────────────────
//  Army base helper – compute LF/EXP from units
// ──────────────────────────────────────────────────────────
static void accumulateScores(const std::vector<Unit *> &units, int &LF, int &EXP)
{
    LF = 0;
    EXP = 0;
    for (Unit *u : units)
    {
        if (dynamic_cast<Vehicle *>(u))
            LF += u->getAttackScore();
        else
            EXP += u->getAttackScore();
    }
    LF = std::min(LF, 1000);
    EXP = std::min(EXP, 500);
}

Army::Army(const std::vector<Unit *> &units, const std::string &n, BattleField *bf) : name(n), battleField(bf)
{
    unitList = new UnitList();
    for (Unit *u : units)
        unitList->insert(u);
    accumulateScores(units, LF, EXP);
}
Army::~Army() { delete unitList; }

// LiberationArmy fight()  (very reduced) ---------------------------------
LiberationArmy::LiberationArmy(const std::vector<Unit *> &u, BattleField *bf) : Army(u, "LIBERATION", bf) {}
void LiberationArmy::fight(Army *enemy, bool defense)
{
    double mult = defense ? 1.3 : 1.5;
    LF = (int)std::ceil(LF * mult);
    EXP = (int)std::ceil(EXP * mult);
} // simplified
std::string LiberationArmy::str() const
{
    std::ostringstream os;
    os << "LiberationArmy[name=" << name << ",LF=" << LF << ",EXP=" << EXP << "]";
    return os.str();
}

// ARVN fight()  (very reduced) -------------------------------------------
ARVN::ARVN(const std::vector<Unit *> &u, BattleField *bf) : Army(u, "ARVN", bf) {}
void ARVN::fight(Army *enemy, bool defense) { /* indices unchanged per spec – simplified */ }
std::string ARVN::str() const
{
    std::ostringstream os;
    os << "ARVN[name=" << name << ",LF=" << LF << ",EXP=" << EXP << "]";
    return os.str();
}

// ──────────────────────────────────────────────────────────
//  Configuration (very light parser – accepts *empty* path)
// ──────────────────────────────────────────────────────────
Configuration::Configuration(const std::string &)
{
    // QUICK dummy battlefield 5x5 with no terrain
    bf = new BattleField(5, 5, {}, {}, {}, {}, {});
    // each side gets one infantry for demo
    libUnits.push_back(new Infantry(10, 2, Position(0, 0), REGULARINFANTRY));
    arvnUnits.push_back(new Infantry(10, 2, Position(4, 4), REGULARINFANTRY));
    eventCode = 50;
}
Configuration::~Configuration()
{
    for (auto u : libUnits)
        delete u;
    for (auto u : arvnUnits)
        delete u;
    delete bf;
}

// ──────────────────────────────────────────────────────────
//  HCMCampaign driver
// ──────────────────────────────────────────────────────────
HCMCampaign::HCMCampaign(const std::string &cfg) : config(new Configuration(cfg))
{
    battleField = config->getBattleField();
    libArmy = new LiberationArmy(config->getLibUnits(), battleField);
    arvn = new ARVN(config->getARVNUnits(), battleField);
}

HCMCampaign::~HCMCampaign()
{
    delete libArmy;
    delete arvn;
    delete config;
}

void HCMCampaign::run()
{
    int ec = config->getEventCode();
    if (ec < 75)
    { // Liberation attacks first
        libArmy->fight(arvn, false);
        arvn->fight(libArmy, true);
    }
    else
    {
        arvn->fight(libArmy, false);
        libArmy->fight(arvn, true);
    }
}

std::string HCMCampaign::printResult()
{
    std::ostringstream os;
    os << "LIBERATIONARMY[LF=" << libArmy->getLF() << ",EXP=" << libArmy->getEXP() << "]-ARVN[LF=" << arvn->getLF() << ",EXP=" << arvn->getEXP() << "]";
    return os.str();
}
